plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
    id 'org.flywaydb.flyway' version '9.22.0'
}

group = 'trendtrack'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-core:6.3.4'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    testRuntimeOnly 'com.h2database:h2'

    implementation 'mysql:mysql-connector-java:8.0.33'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'org.slf4j:slf4j-api:2.0.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

test {
    useJUnitPlatform()
}

sonar {
    properties {
        property("sonar.projectKey", "trendtrack")
        property("sonar.projectName", "trendtrack")
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.token", "sqp_68a8aac860e671da16c5b7263e8b50c5c51c045e")
        property("sonar.exclusions", "**/configuration/**,**/controller/**,**/persistence/**,**/domain/**")
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/configuration/**"
            ])
        }))
    }
}